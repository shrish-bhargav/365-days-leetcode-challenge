/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList_iterative(ListNode* head) {
        if (head == nullptr) return head;

        ListNode* pre=nullptr;
        ListNode* cur=head;
        ListNode* next;
        while (cur != nullptr) {
            next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }

    void reverseList1(ListNode* head, ListNode*& newHead) {
        ListNode* p = head->next;
        if (p!= nullptr) {
            reverseList1(p, newHead);
            p->next = head;
        } else {
            newHead = head;
        }
    }
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr) return head;

        ListNode* newHead;
        reverseList1(head, newHead);
        head->next = nullptr;
        return newHead;
    }
};

